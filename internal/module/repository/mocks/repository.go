// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/opendependency/go-spec/pkg/spec/v1"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddModule provides a mock function with given fields: module
func (_m *Repository) AddModule(module *v1.Module) error {
	ret := _m.Called(module)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Module) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModule provides a mock function with given fields: namespace, name
func (_m *Repository) DeleteModule(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModuleType provides a mock function with given fields: namespace, name, type_
func (_m *Repository) DeleteModuleType(namespace string, name string, type_ string) error {
	ret := _m.Called(namespace, name, type_)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(namespace, name, type_)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModuleVersion provides a mock function with given fields: namespace, name, type_, version
func (_m *Repository) DeleteModuleVersion(namespace string, name string, type_ string, version string) error {
	ret := _m.Called(namespace, name, type_, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(namespace, name, type_, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNamespace provides a mock function with given fields: namespace
func (_m *Repository) DeleteNamespace(namespace string) error {
	ret := _m.Called(namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModule provides a mock function with given fields: namespace, name, type_, version
func (_m *Repository) GetModule(namespace string, name string, type_ string, version string) (*v1.Module, error) {
	ret := _m.Called(namespace, name, type_, version)

	var r0 *v1.Module
	if rf, ok := ret.Get(0).(func(string, string, string, string) *v1.Module); ok {
		r0 = rf(namespace, name, type_, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Module)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(namespace, name, type_, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModuleNames provides a mock function with given fields: namespace
func (_m *Repository) ListModuleNames(namespace string) ([]string, error) {
	ret := _m.Called(namespace)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModuleNamespaces provides a mock function with given fields:
func (_m *Repository) ListModuleNamespaces() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModuleTypes provides a mock function with given fields: namespace, name
func (_m *Repository) ListModuleTypes(namespace string, name string) ([]string, error) {
	ret := _m.Called(namespace, name)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModuleVersions provides a mock function with given fields: namespace, name, type_
func (_m *Repository) ListModuleVersions(namespace string, name string, type_ string) ([]string, error) {
	ret := _m.Called(namespace, name, type_)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(namespace, name, type_)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(namespace, name, type_)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
